import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';

void main() {
  runApp(MaterialApp(
    title: 'RoutineBuddy',
    theme: ThemeData(
      useMaterial3: true,
      colorSchemeSeed: const Color(0xFF0FA3A5),
    ),
    home: const FillYourRoutineScreen(),
  ));
}

class CasualPreviewScreen extends StatelessWidget {
  const CasualPreviewScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Casual Preview')),
      body: const Center(child: Text('Casual Preview Screen')),
    );
  }
}

class FillYourRoutineScreen extends StatelessWidget {
  const FillYourRoutineScreen({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Fill your routine'),
      ),
      body: ListView(
        padding: const EdgeInsets.all(16),
        children: [
          TemplateCard(
            title: 'Use "The Casual"',
            subtitle: 'Maintain a simple, balanced daily flow that supports health, light activity, and personal time with minimal effort',
            gradient: const [Color(0xFF0FA3A5), Color(0xFF22C55E)],
            icon: Icons.favorite,
            onTap: () => Navigator.push(context, MaterialPageRoute(builder: (_) => const CasualPreviewScreen())),
          ),
          const SizedBox(height: 16),
          TemplateCard(
            title: 'Create your own routine',
            subtitle: 'Set your anchors and build your own timeline.',
            gradient: const [Color(0xFF3B82F6), Color(0xFF0EA5E9)],
            icon: Icons.edit_calendar_outlined,
            onTap: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Manual setup coming soon!')),
              );
            },
          ),
        ],
      ),
    );
  }
}

class TemplateCard extends StatelessWidget {
  final String title;
  final String subtitle;
  final List<Color> gradient;
  final IconData icon;
  final VoidCallback? onTap;

  const TemplateCard({
    required this.title,
    required this.subtitle,
    required this.gradient,
    this.icon = Icons.arrow_forward,
    this.onTap,
    Key? key,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return InkWell(
      onTap: onTap,
      child: Container(
        height: 140,
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(20),
          gradient: LinearGradient(colors: gradient),
          boxShadow: [BoxShadow(color: Colors.black.withOpacity(0.08), blurRadius: 16, offset: const Offset(0, 8))],
        ),
        padding: const EdgeInsets.all(16),
        child: Row(
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            CircleAvatar(
              radius: 28,
              backgroundColor: Colors.white.withOpacity(0.2),
              child: Icon(icon, color: Colors.white),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(title, style: const TextStyle(color: Colors.white, fontSize: 18, fontWeight: FontWeight.w700)),
                  const SizedBox(height: 6),
                  Text(subtitle, style: const TextStyle(color: Colors.white70)),
                ],
              ),
            ),
            const Icon(Icons.arrow_forward_ios, size: 16, color: Colors.white70),
          ],
        ),
      ),
    );
  }
}

Future<void> saveUserSettings({
  required TimeOfDay wakeTime,
  required TimeOfDay bedTime,
  required List<TimeOfDay> mealTimes,
  required List<String> mealNames,
  required String scheduleMode,
  bool isCasualTemplate = false,
}) async {
  try {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setInt('wakeTime_hour', wakeTime.hour);
    await prefs.setInt('wakeTime_minute', wakeTime.minute);
    await prefs.setInt('bedTime_hour', bedTime.hour);
    await prefs.setInt('bedTime_minute', bedTime.minute);
    for (int i = 0; i < mealTimes.length && i < 3; i++) {
      await prefs.setInt('meal${i}_hour', mealTimes[i].hour);
      await prefs.setInt('meal${i}_minute', mealTimes[i].minute);
      if (i < mealNames.length) {
        await prefs.setString('meal${i}_name', mealNames[i]);
      }
    }
    await prefs.setString('scheduleMode', scheduleMode);
    await prefs.setBool('isCasualTemplate', isCasualTemplate);
    print('DEBUG: User settings saved successfully');
  } catch (e) {
    print('DEBUG: Error saving user settings: $e');
  }
}

List<Map<String, dynamic>> getCasualTemplateActions() {
  return [
    {'name': 'Wake up', 'time': TimeOfDay(hour: 6, minute: 0), 'category': 'schedule', 'dayOfWeek': 2, 'isScheduleTime': true, 'frequency': 1},
    {'name': 'Drink water', 'time': TimeOfDay(hour: 6, minute: 5), 'category': 'health', 'dayOfWeek': 2, 'frequency': 3},
    {'name': 'Light stretch', 'time': TimeOfDay(hour: 6, minute: 15), 'category': 'exercise', 'dayOfWeek': 2, 'frequency': 1},
    {'name': 'Breakfast', 'time': TimeOfDay(hour: 7, minute: 0), 'category': 'schedule', 'dayOfWeek': 2, 'isScheduleTime': true, 'frequency': 1},
    {'name': 'Start work', 'time': TimeOfDay(hour: 8, minute: 30), 'category': 'productivity', 'dayOfWeek': 2, 'frequency': 1},
    {'name': 'Check posture', 'time': TimeOfDay(hour: 10, minute: 30), 'category': 'health', 'dayOfWeek': 2, 'frequency': 2},
    {'name': 'Lunch', 'time': TimeOfDay(hour: 12, minute: 0), 'category': 'schedule', 'dayOfWeek': 2, 'isScheduleTime': true, 'frequency': 1},
    {'name': 'Short walk', 'time': TimeOfDay(hour: 12, minute: 45), 'category': 'exercise', 'dayOfWeek': 2, 'frequency': 2},
    {'name': 'End work', 'time': TimeOfDay(hour: 17, minute: 30), 'category': 'productivity', 'dayOfWeek': 2, 'frequency': 1},
    {'name': 'Dinner', 'time': TimeOfDay(hour: 19, minute: 0), 'category': 'schedule', 'dayOfWeek': 2, 'isScheduleTime': true, 'frequency': 1},
    {'name': 'Leisure time', 'time': TimeOfDay(hour: 20, minute: 0), 'category': 'leisure', 'dayOfWeek': 2, 'frequency': 1},
    {'name': 'Review tomorrow', 'time': TimeOfDay(hour: 22, minute: 0), 'category': 'schedule', 'dayOfWeek': 2, 'isEvent': true, 'frequency': 1},
    {'name': 'Sleep', 'time': TimeOfDay(hour: 22, minute: 30), 'category': 'schedule', 'dayOfWeek': 2, 'isScheduleTime': true, 'frequency': 1},
  ];
}

Future<void> resetSetup() async {
  try {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('isInitialSetupComplete', false);
    print('DEBUG: Setup reset - will show onboarding again');
  } catch (e) {
    print('DEBUG: Error resetting setup: $e');
  }
}
